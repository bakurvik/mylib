// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_user_reading_by_status.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserReadingByStatus = `-- name: GetUserReadingByStatus :many
SELECT book_id, rating, start_date, finish_date, created_at FROM user_reading
WHERE user_id = $1 AND status = $2
`

type GetUserReadingByStatusParams struct {
	UserID uuid.UUID
	Status ReadingStatus
}

type GetUserReadingByStatusRow struct {
	BookID     uuid.UUID
	Rating     int32
	StartDate  sql.NullTime
	FinishDate sql.NullTime
	CreatedAt  time.Time
}

func (q *Queries) GetUserReadingByStatus(ctx context.Context, arg GetUserReadingByStatusParams) ([]GetUserReadingByStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserReadingByStatus, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserReadingByStatusRow
	for rows.Next() {
		var i GetUserReadingByStatusRow
		if err := rows.Scan(
			&i.BookID,
			&i.Rating,
			&i.StartDate,
			&i.FinishDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
