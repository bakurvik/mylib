// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ReadingStatus string

const (
	ReadingStatusFinished   ReadingStatus = "finished"
	ReadingStatusReading    ReadingStatus = "reading"
	ReadingStatusWantToRead ReadingStatus = "want_to_read"
)

func (e *ReadingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReadingStatus(s)
	case string:
		*e = ReadingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReadingStatus: %T", src)
	}
	return nil
}

type NullReadingStatus struct {
	ReadingStatus ReadingStatus
	Valid         bool // Valid is true if ReadingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReadingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReadingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReadingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReadingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReadingStatus), nil
}

type UserReading struct {
	UserID     uuid.UUID
	BookID     uuid.UUID
	Status     ReadingStatus
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Rating     int32
	StartDate  sql.NullTime
	FinishDate sql.NullTime
}
