// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_books_by_author.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT b.id, b.title FROM book_authors ba
JOIN books b ON ba.book_id = b.id
WHERE ba.author_id = $1
`

type GetBooksByAuthorRow struct {
	ID    uuid.UUID
	Title string
}

func (q *Queries) GetBooksByAuthor(ctx context.Context, authorID uuid.UUID) ([]GetBooksByAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByAuthorRow
	for rows.Next() {
		var i GetBooksByAuthorRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
