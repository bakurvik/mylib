// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: search_authors.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const searchAuthors = `-- name: SearchAuthors :many
SELECT id, full_name, ts_rank(tsv, plainto_tsquery('english', $1)) AS rank
FROM authors WHERE tsv @@ plainto_tsquery('english', $1)
ORDER BY rank DESC
LIMIT $2
`

type SearchAuthorsParams struct {
	PlaintoTsquery string
	Limit          int32
}

type SearchAuthorsRow struct {
	ID       uuid.UUID
	FullName string
	Rank     float32
}

func (q *Queries) SearchAuthors(ctx context.Context, arg SearchAuthorsParams) ([]SearchAuthorsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchAuthors, arg.PlaintoTsquery, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAuthorsRow
	for rows.Next() {
		var i SearchAuthorsRow
		if err := rows.Scan(&i.ID, &i.FullName, &i.Rank); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
